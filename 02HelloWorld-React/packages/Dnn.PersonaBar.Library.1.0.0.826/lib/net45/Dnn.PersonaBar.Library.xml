<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dnn.PersonaBar.Library</name>
    </assembly>
    <members>
        <member name="P:Dnn.PersonaBar.Library.Attributes.ServiceScopeAttribute.Exclude">
            <summary>
            The Roles which need exclude from permissions, when user in the role will receive 401 exception.
            If need set multiple roles, put semicolon(;) between role names. 
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.CalucalatePercentForDisplay(System.Int32,System.Int32)">
            <summary>
            Take a numerator and a denominator and create a human-readable percentage.
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.CalculateCountForDisplay(System.Int64)">
            <summary>
            Shorten a raw number to a more friendly human display
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.ContainsSpecialCharacter(System.String)">
            <summary>
            Does the specified input string <paramref name="input"/> contain disallowed characters?
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.StripTagsCharArray(System.String)">
            <summary>
            Remove HTML tags from string using char array.
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.TrimWithEllipsis(System.String,System.Int32)">
            <summary>
            Trims a string to supplied maxLength and replaces the last three characters with three dots
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.GetUserById(System.Int32,System.Int32)">
            <summary>
            Finds a user in Portal or Non-Portal (Host)
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.GetProfileAvatar(System.Int32)">
            <summary>
            Get User's standard Profile avatar. The Url is resolved to current portal
            </summary>
            <param name="userId">user Id</param>
            <returns>user profile picture url</returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.GetProfileAvatar(DotNetNuke.Entities.Users.UserInfo,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a relative URL for the user profile image while removing that of the deleted and super users
            </summary>
            <param name="user">user info</param>
            <param name="width">width in pixel</param>
            <param name="height">height in pixel</param>
            <param name="showSuperUsers">true if want show super users user profile picture, false otherwise</param>
            <returns>relative user profile picture url</returns>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.GetProfileAvatar(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a relative URL for the user profile image while removing that of the deleted
            </summary>
            <param name="userId">user Id</param>
            <param name="portalId">portal Id</param>
            <param name="width">width in pixel</param>
            <param name="height">height in pixel</param>
            <param name="showSuperUsers">true if want show super users user profile picture, false otherwise</param>
            <returns>relative user profile picture url</returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.GetProfileAvatarAbsoluteUrl(System.Int32,DotNetNuke.Entities.Users.UserInfo,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a absolute URL for the user profile image while removing that of the deleted and super users
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="user">user info</param>
            <param name="width">width in pixel</param>
            <param name="height">height in pixel</param>
            <param name="showSuperUsers">true if want show super users user profile picture, false otherwise</param>
            <returns>absolute user profile picture url</returns>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.GetUserProfilePictureUrl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return User Profile Picture relative Url
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="userId">User Id</param>
            <param name="width">Width in pixel</param>
            <param name="height">Height in pixel</param>
            <returns>Relative url,  e.g. /DnnImageHandler.ashx?userid=1&amp;h=32&amp;w=32 considering child portal</returns>
            <remarks>IMPORTANT NOTE: this has been copied from the Platform IUserController.GetUserProfilePictureUrl
            The method in platform depends on the current portal setting so cannot be used in background thread or scheduler jobs. 
            To fit requirements for Evoq 8.5.0 we have copied and modified this method here to support a portalId input parameter. 
            Unfortunately we had no way to create this method overload in Platform as at that point it was frozed for 8.0.4.
            This method will be moved to Platform: see jira CONTENT-6674
            </remarks>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Common.Utilities.GetAbsoluteUrl(System.Int32,System.String)">
            <summary>
            Returns an absolute url given a relative url
            </summary>
            <param name="portalId">portal Id</param>
            <param name="relativeUrl">relative url</param>
            <returns>absolute url</returns>
        </member>
        <member name="T:Dnn.PersonaBar.Library.Containers.IPersonaBarContainer">
            <summary>
            Persona Bar Container.
            </summary>
        </member>
        <member name="P:Dnn.PersonaBar.Library.Containers.IPersonaBarContainer.Visible">
            <summary>
            Indicate whether persona bar is available.
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Containers.IPersonaBarContainer.Initialize(System.Web.UI.UserControl)">
            <summary>
            Initialize the persona bar container.
            </summary>
            <param name="personaBarControl">The Persona Bar Container control.</param>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Containers.IPersonaBarContainer.GetConfiguration">
            <summary>
            Get Persona Bar Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Controllers.IMenuItemController.UpdateParameters(Dnn.PersonaBar.Library.PersonaBar.Model.MenuItem)">
            <summary>
            Update menu item parameters.
            </summary>
            <param name="menuItem"></param>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Controllers.IMenuItemController.Visible(Dnn.PersonaBar.Library.PersonaBar.Model.MenuItem)">
            <summary>
            whether the menu item visible in current context.
            </summary>
            <param name="menuItem"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Controllers.IMenuItemController.GetSettings(Dnn.PersonaBar.Library.PersonaBar.Model.MenuItem)">
            <summary>
            get menu settings.
            </summary>
            <param name="menuItem"></param>
            <returns></returns>
        </member>
        <member name="T:Dnn.PersonaBar.Library.DTO.UserSettings">
            <summary>
            Persona Bar User Settings
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.Helper.IPermissionGridApi.GetRoles">
            <summary>
            Returns all roles/role groups info
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dnn.PersonaBar.Library.HttpRequestMessageExtensions">
            <summary>
            Extends the HttpRequestMessage collection
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.HttpRequestMessageExtensions.GetQueryStrings(System.Net.Http.HttpRequestMessage)">
            <summary>
            Returns a dictionary of QueryStrings that's easier to work with 
            than GetQueryNameValuePairs KevValuePairs collection.
            
            If you need to pull a few single values use GetQueryString instead.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.HttpRequestMessageExtensions.GetQueryString(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Returns an individual querystring value
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.HttpRequestMessageExtensions.GetQueryStringAsInteger(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Returns an individual querystring value as integer.
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.HttpRequestMessageExtensions.GetHeader(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Returns an individual HTTP Header value
            </summary>
            <param name="request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.HttpRequestMessageExtensions.GetCookie(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Retrieves an individual cookie from the cookies collection
            </summary>
            <param name="request"></param>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="T:Dnn.PersonaBar.Library.PersonaBar.Controllers.IPersonaBarController">
            <summary>
            Interface responsible to manage the PersonaBar structure by User's Roles and Sku
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Controllers.IPersonaBarController.GetMenu(DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Gets the menu structure of the persona bar (for both mobile and desktop)
            </summary>
            <param name="portalSettings"></param>
            <param name="userInfo">the user that will be used to filter the menu</param>
            <returns>Persona bar menu structure for the user</returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Controllers.IPersonaBarController.IsVisible(DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo,Dnn.PersonaBar.Library.PersonaBar.Model.MenuItem)">
            <summary>
            Whether the menu item is visible.
            </summary>
            <param name="portalSettings">Portal Settings.</param>
            <param name="user">User Info.</param>
            <param name="menuItem">The menu item.</param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Controllers.IPersonaBarUserSettingsController.UpdatePersonaBarUserSettings(Dnn.PersonaBar.Library.DTO.UserSettings,System.Int32,System.Int32)">
            <summary>
            Updates the PersonaBar user settings
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Controllers.IPersonaBarUserSettingsController.GetPersonaBarUserSettings">
            <summary>
            Gets the PersonaBar user settings
            </summary>
        </member>
        <member name="T:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionCollection">
            -----------------------------------------------------------------------------
        </member>
        <member name="T:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : MenuPermissionInfo
            -----------------------------------------------------------------------------
            <summary>
            MenuPermissionInfo provides the Entity Layer for Module Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new MenuPermissionInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new MenuPermissionInfo
            </summary>
            <param name="permission">A PermissionInfo object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.MenuPermissionId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module Permission ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.MenuId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a MenuPermissionInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.Equals(Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Compares if two MenuPermissionInfo objects are equivalent/equal
            </summary>
            <param name="other">a ModulePermissionObject</param>
            <returns>true if the permissions being passed represents the same permission
            in the current object
            </returns>
            <remarks>
            This function is needed to prevent adding duplicates to the ModulePermissionCollection.
            ModulePermissionCollection.Contains will use this method to check if a given permission
            is already included in the collection.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Permissions.MenuPermissionInfo.Equals(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Compares if two MenuPermissionInfo objects are equivalent/equal
            </summary>
            <param name="obj">a ModulePermissionObject</param>
            <returns>true if the permissions being passed represents the same permission
            in the current object
            </returns>
            <remarks>
            This function is needed to prevent adding duplicates to the ModulePermissionCollection.
            ModulePermissionCollection.Contains will use this method to check if a given permission
            is already included in the collection.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarExtensionRepository">
            <summary>
            Interface responsible for persona bar extensions.
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarExtensionRepository.SaveExtension(Dnn.PersonaBar.Library.PersonaBar.Model.PersonaBarExtension)">
            <summary>
            save extension.
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarExtensionRepository.DeleteExtension(Dnn.PersonaBar.Library.PersonaBar.Model.PersonaBarExtension)">
            <summary>
            delete extension.
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarExtensionRepository.DeleteExtension(System.String)">
            <summary>
            delete extension.
            </summary>
            <param name="identifier"></param>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarExtensionRepository.GetExtensions">
            <summary>
            get persona bar extensions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarExtensionRepository.GetExtensions(System.Int32)">
            <summary>
            get persona bar extensions for menu.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository">
            <summary>
            Interface responsible to get the Persona Bar menu structure from the data layer
            </summary>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository.GetMenu">
            <summary>
            Gets the menu structure of the persona bar
            </summary>
            <returns>Persona bar menu structure</returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository.SaveMenuItem(Dnn.PersonaBar.Library.PersonaBar.Model.MenuItem)">
            <summary>
            Save menu item info.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository.DeleteMenuItem(System.String)">
            <summary>
            remove a menu item.
            </summary>
            <param name="identifier"></param>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository.GetMenuItem(System.String)">
            <summary>
            Get the menu item by identifier.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository.GetMenuItem(System.Int32)">
            <summary>
            Get the menu item by menu id.
            </summary>
            <param name="menuId"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository.GetMenuDefaultRoles(System.Int32)">
            <summary>
            Get a menu item's default allowed roles.
            </summary>
            <param name="menuId"></param>
            <returns></returns>
        </member>
        <member name="M:Dnn.PersonaBar.Library.PersonaBar.Repository.IPersonaBarRepository.SaveMenuDefaultRoles(Dnn.PersonaBar.Library.PersonaBar.Model.MenuItem,System.String)">
            <summary>
            Save a menu item's default allowed roles.
            </summary>
            <param name="menuItem"></param>
            <param name="roleNames"></param>
        </member>
        <member name="T:Dnn.PersonaBar.Library.ServiceScope">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dnn.PersonaBar.Library.ServiceScope.Common">
            <summary>
            the service available for all users, but namespace is personaBar/common.
            </summary>
        </member>
        <member name="F:Dnn.PersonaBar.Library.ServiceScope.Regular">
            <summary>
            the service available for all users.
            </summary>
        </member>
        <member name="F:Dnn.PersonaBar.Library.ServiceScope.Admin">
            <summary>
            the service only available for admin users.
            </summary>
        </member>
        <member name="F:Dnn.PersonaBar.Library.ServiceScope.Host">
            <summary>
            the service only available for host users.
            </summary>
        </member>
        <member name="F:Dnn.PersonaBar.Library.ServiceScope.AdminHost">
            <summary>
            the service avaiable for both admin and host users.
            </summary>
        </member>
    </members>
</doc>
